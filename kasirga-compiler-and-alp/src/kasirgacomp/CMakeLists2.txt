find_package(LLVM)
find_package(LLVM REQUIRED CONFIG)

include_directories(${LLVM_INCLUDE_DIRS})
add_definitions(${LLVM_DEFINITIONS})
list(APPEND CMAKE_MODULE_PATH "${LLVM_CMAKE_DIR}")
include(AddLLVM)

#include(AddLLVM.cmake)

#set(LLVM_LINK_COMPONENTS
#  AllTargetsDescs
#  AllTargetsDisassemblers
#  AllTargetsInfos
#  BinaryFormat
#  CodeGen
#  DebugInfoDWARF
#  DebugInfoPDB
#  Demangle
#  MC
#  MCDisassembler
#  Object
#  Support
#  Symbolize
##  RISCVInfo
#  )

##
set(LLVM_LINK_COMPONENTS
  BinaryFormat
  Option
  ProfileData
  Support
  )

if(WIN32)
  # MSVCToolChain.cpp uses version.dll.
  set(system_libs version)
endif()

#add_clang_library(clangDriver
#  Action.cpp
#  Compilation.cpp
#  DarwinSDKInfo.cpp
#  Distro.cpp
#  Driver.cpp
#  DriverOptions.cpp
#  Job.cpp
#  Multilib.cpp
#  OptionUtils.cpp
#  Phases.cpp
#  SanitizerArgs.cpp
#  Tool.cpp
#  ToolChain.cpp
#  ToolChains/Arch/AArch64.cpp
#  ToolChains/Arch/ARM.cpp
#  ToolChains/Arch/Mips.cpp
#  ToolChains/Arch/PPC.cpp
#  ToolChains/Arch/RISCV.cpp
#  ToolChains/Arch/Sparc.cpp
#  ToolChains/Arch/SystemZ.cpp
#  ToolChains/Arch/VE.cpp
#  ToolChains/Arch/X86.cpp
#  ToolChains/AIX.cpp
#  ToolChains/Ananas.cpp
#  ToolChains/AMDGPU.cpp
#  ToolChains/AVR.cpp
#  ToolChains/BareMetal.cpp
#  ToolChains/Clang.cpp
#  ToolChains/CloudABI.cpp
#  ToolChains/CommonArgs.cpp
#  ToolChains/Contiki.cpp
#  ToolChains/CrossWindows.cpp
#  ToolChains/Cuda.cpp
#  ToolChains/Darwin.cpp
#  ToolChains/DragonFly.cpp
#  ToolChains/Flang.cpp
#  ToolChains/FreeBSD.cpp
#  ToolChains/Fuchsia.cpp
#  ToolChains/Gnu.cpp
#  ToolChains/Haiku.cpp
#  ToolChains/HIP.cpp
#  ToolChains/Hexagon.cpp
#  ToolChains/Hurd.cpp
#  ToolChains/Linux.cpp
#  ToolChains/MipsLinux.cpp
#  ToolChains/MinGW.cpp
#  ToolChains/Minix.cpp
#  ToolChains/MSP430.cpp
#  ToolChains/MSVC.cpp
#  ToolChains/Myriad.cpp
#  ToolChains/NaCl.cpp
#  ToolChains/NetBSD.cpp
#  ToolChains/OpenBSD.cpp
#  ToolChains/PS4CPU.cpp
#  ToolChains/RISCVToolchain.cpp
#  ToolChains/Solaris.cpp
#  ToolChains/TCE.cpp
#  ToolChains/VEToolchain.cpp
#  ToolChains/WebAssembly.cpp
#  ToolChains/XCore.cpp
#  ToolChains/PPCLinux.cpp
#  ToolChains/InterfaceStubs.cpp
#  Types.cpp
#  XRayArgs.cpp
#
#  DEPENDS
#  ClangDriverOptions
#
#  LINK_LIBS
#  clangBasic
#  ${system_libs}
#  )


##

##
#set(LLVM_TARGET_DEFINITIONS RISCV.td)
#
#tablegen(LLVM RISCVGenAsmMatcher.inc -gen-asm-matcher)
#tablegen(LLVM RISCVGenAsmWriter.inc -gen-asm-writer)
#tablegen(LLVM RISCVGenCompressInstEmitter.inc -gen-compress-inst-emitter)
#tablegen(LLVM RISCVGenDAGISel.inc -gen-dag-isel)
#tablegen(LLVM RISCVGenDisassemblerTables.inc -gen-disassembler)
#tablegen(LLVM RISCVGenGlobalISel.inc -gen-global-isel)
#tablegen(LLVM RISCVGenInstrInfo.inc -gen-instr-info)
#tablegen(LLVM RISCVGenMCCodeEmitter.inc -gen-emitter)
#tablegen(LLVM RISCVGenMCPseudoLowering.inc -gen-pseudo-lowering)
#tablegen(LLVM RISCVGenRegisterBank.inc -gen-register-bank)
#tablegen(LLVM RISCVGenRegisterInfo.inc -gen-register-info)
#tablegen(LLVM RISCVGenSubtargetInfo.inc -gen-subtarget)
#tablegen(LLVM RISCVGenSystemOperands.inc -gen-searchable-tables)
#
#add_public_tablegen_target(RISCVCommonTableGen)
##

#target_link_libraries(clang
#  PRIVATE
#  clangAST
#  clangASTMatchers
#  clangBasic
#  clangFrontend
#  clangSerialization
#  clangTooling
#  )

add_llvm_executable(clang
  driver.cpp
  #cc1_main.cpp
  cc1as_main.cpp
  cc1gen_reproducer_main.cpp

  DEPENDS
  intrinsics_gen
  )

#  ADD_TO_COMPONENT
#  RISCV
#)

